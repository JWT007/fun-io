(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{148:function(e,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("p",[e._v("Fun I/O provides functional programming patterns and high level abstractions for reusable, reliable and synchronous I/O.\nFun I/O supports Java 8 or later and Scala 2.10, 2.11 and 2.12 equally well via dedicated APIs and is covered by the\nApache License, version 2.0.")]),e._v(" "),a("h2",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction","aria-hidden":"true"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),a("div",{pre:!0},[a("p",[e._v("Fun I/O composes the low level classes "),a("code",[e._v("InputStream")]),e._v(" and "),a("code",[e._v("OutputStream")]),e._v(" et al into powerful, high level abstractions\nlike "),a("code",[e._v("Codec")]),e._v(", "),a("code",[e._v("Source")]),e._v(", "),a("code",[e._v("Sink")]),e._v(", "),a("code",[e._v("Store")]),e._v(", "),a("code",[e._v("ArchiveStore")]),e._v(", "),a("code",[e._v("Socket")]),e._v(", "),a("code",[e._v("Filter")]),e._v(" et al.\nThese abstractions are:")])]),e._v(" "),a("div",{pre:!0},[a("ul",[a("li",[e._v("Easy to use and implement.")]),e._v(" "),a("li",[e._v("Stateless by design and therefore reusable and thread-safe (except for their observable side effects of course, e.g.\nwriting data to a file).")]),e._v(" "),a("li",[e._v("Composable into stateless I/O subsystems.")]),e._v(" "),a("li",[e._v("Interoperable with any code which deals with an "),a("code",[e._v("InputStream")]),e._v(" or "),a("code",[e._v("OutputStream")]),e._v(" directly.")])])]),e._v(" "),a("div",{pre:!0},[a("p",[e._v("Fun I/O takes proper care of resource management: All created "),a("code",[e._v("InputStream")]),e._v(" and "),a("code",[e._v("OutputStream")]),e._v(" instances are properly\nclosed, even if there is an exception in a nested constructor.\nSay goodbye to resource leaks and try-with-resources statements!")])])])}],!1,null,null,null);r.options.__file="README.md";t.default=r.exports}}]);